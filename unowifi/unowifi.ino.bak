//FUCKIN’ UP TIM TIM’S LIFE SINCE ‘03 - ALEX
/*wifi name: 
Cisco73736
wifi pass: 
robochaser
*/
/*

 This example does a full test of core connectivity:
 * Initialization
 * SSID Scan
 * AP connection
 * DHCP printout
 * DNS lookup
 * Ping
 * Disconnect
 It's a good idea to run this sketch when first setting up the
 module.
 
 */

#include <Adafruit_CC3000.h> //Add in libraries (#include)
#include <ccspi.h>
#include <SPI.h>
#include <string.h>
#include "utility/debug.h"
//CODE FROM: https://learn.adafruit.com/adafruit-cc3000-wifi/cc3000-library-software 

// These are the interrupt and control pins
#define ADAFRUIT_CC3000_IRQ   3  // MUST be an interrupt pin! Replaces all ADA… //with the number 3 (For pin usage)
// These can be any two pins
#define ADAFRUIT_CC3000_VBAT  5
#define ADAFRUIT_CC3000_CS    10
// Use hardware SPI for the remaining pins
// On an UNO, SCK = 13, MISO = 12, and MOSI = 11 //NEED TO REDEFINE PINS
Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,
SPI_CLOCK_DIVIDER); // you can change this clock speed but DI

#define WLAN_SSID       "Cisco73736"        // cannot be longer than 32 characters!
#define WLAN_PASS       "robochaser"
// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2
#define WLAN_SECURITY   WLAN_SEC_WPA2


#define trigPing 13;
#define echoPin 12;
#define led 11;
#define led2 10;

void setup(void)
{
  //Serial.begin is at a very high speed. May need to drop
  //down to 9600 instead of 115200
  Serial.begin(115200);
  Serial.println(F("Hello, CC3000!\n")); 

  displayDriverMode();
  Serial.print("Free RAM: "); 
  Serial.println(getFreeRam(), DEC);

  /* Initialize the module */
  Serial.println(F("\nInitializing the CC3000 ..."));

//If wifi board can’t be initialized, go into infinite loop. Program will need to be restarted.  
if (!cc3000.begin())
  {
    Serial.println(F("Unable to initialise the CC3000! Check your wiring?"));
    while(1);
  }

  /* Optional: Update the Mac Address to a known value */
  /*
  uint8_t macAddress[6] = { 0x08, 0x00, 0x28, 0x01, 0x79, 0xB7 };
   if (!cc3000.setMacAddress(macAddress))
   {
   Serial.println(F("Failed trying to update the MAC address"));
   while(1);
   }
   */

  uint16_t firmware = checkFirmwareVersion();
  if ((firmware != 0x113) && (firmware != 0x118)) {
    Serial.println(F("Wrong firmware version!"));
    for(;;);
  }

  displayMACAddress();

  /* Optional: Get the SSID list (not available in 'tiny' mode) */
#ifndef CC3000_TINY_DRIVER
  listSSIDResults();
#endif

  /* Delete any old connection data on the module */
  Serial.println(F("\nDeleting old connection profiles"));
  if (!cc3000.deleteProfiles()) {
    Serial.println(F("Failed!"));
    while(1);
  }

  /* Attempt to connect to an access point */
  char *ssid = WLAN_SSID;             /* Max 32 chars */
  Serial.print(F("\nAttempting to connect to ")); 
  Serial.println(ssid);

  /* NOTE: Secure connections are not available in 'Tiny' mode! */
  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    Serial.println(F("Failed!"));
    while(1);
  }

  Serial.println(F("Connected!"));

  /* Wait for DHCP to complete */
  Serial.println(F("Request DHCP"));
  while (!cc3000.checkDHCP())
  {
    delay(100); // ToDo: Insert a DHCP timeout!
  }  

  /* Display the IP address DNS, Gateway, etc. */
  while (! displayConnectionDetails()) {
    delay(1000);

  }


 
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(led, OUTPUT);
  pinMode(led2, OUTPUT);
}
//distance code




void loop() {
  long duration, distance;
  digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);
  //  delayMicroseconds(1000); - Removed this line
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;

  if (distance >= 200 || distance <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(distance);
    Serial.println(" cm");
  }

}

x = motorspeed
if cc == true
{
  if (throttle touched)
  {
    cc == false
  }	
  if (distance>61)
  {
    //car is far away
    //maintain speed
    motorspeed = x 
      if (+ pressed)
    {
      motorspeed = x+5
        //increase motor speed by 5
    }
    if (- pressed)
    {
      motorspeed = x-5
        //decrease motor speed by 5
    }
  }
  else
  {
    if (distance<61)
    {
      motorspeed = x*.5
        //car is too close
    }
    else
    {
      motorspeed = x
        //car must be 2 feet away 
    }
  }

}
else
{ 
  //manual control

}	





